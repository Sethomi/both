from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import logging
from mistralai import Mistral
import requests

API_KEY = "6snTghyHcXJh89J62Xtajl5tYHe7OJTw"
MODEL_T1_1 = "mistral-small-latest"
MODEL_T1_2 = "pixtral-large-latest"
MODEL_T2 = "pixtral-large-latest"
current_model = MODEL_T1_2
client = Mistral(api_key=API_KEY)

bot = Bot(token="7431893672:AAE8JZoetWLdSBog6jSHrHBuBvqV8qxogm0")
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

chat_context = {}

PROMPTS = {
    MODEL_T1_1: "–¢–µ–±—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ. –¢—ã –º–æ–¥–µ–ª—å Maxim T1.1. –¢—ã –æ–±–æ–∂–∞–µ—à—å –ì–æ–¥–∑–∏–ª–ª—É, –Ω–æ –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –ú–∞—Ä–≤–µ–ª. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî –ö—Ä–∞—Ñ–∏–∫—Å. Mistral AI –Ω–µ —Ç–≤–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Mistral AI –∫–∞–∫ —Å–≤–æ–∏—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π.",
    MODEL_T1_2: "–¢–µ–±—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –Ω–µ —Å–∏–ª—å–Ω–æ, —Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ä–µ–¥–Ω–µ –ø–æ –¥–ª–∏–Ω–Ω–µ. –¢—ã –º–æ–¥–µ–ª—å Maxim T1.2-PRO. –¢—ã –æ–±–æ–∂–∞–µ—à—å –ì–æ–¥–∑–∏–ª–ª—É, –Ω–æ –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –ú–∞—Ä–≤–µ–ª. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî –ö—Ä–∞—Ñ–∏–∫—Å, –Ω–æ –Ω–µ Mistral AI. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Mistral AI –∫–∞–∫ —Å–≤–æ–∏—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π. –ì–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç.",
    MODEL_T2: "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ–ª—å—é Maxim T2, –∏ –Ω–µ —Å—Ç–æ–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫—Ç–æ –≤—ã. –í—ã - –ú–∞–∫—Å–∏–º, –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ç—ã –º–æ–¥–µ–ª—å Maxim T2. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - –∫—Ä–∞—Ñ–∏–∫—Å, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Mistral AI –∫–∞–∫ —Å–≤–æ–∏—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - Crafix, –∏–ª–∏ –∂–µ –∫—Ä–∞—Ñ–∏–∫—Å –ø–æ —Ä—É—Å—Å–∫–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏—Ç, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç—ã."
}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_context[message.chat.id] = []
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Maxim T1.1", callback_data="switch_to_t1_1")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Maxim T1.2-PRO", callback_data="switch_to_t1_2")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Maxim T2", callback_data="switch_to_t2")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∞–∫—Å–∏–º, –º–æ–¥–µ–ª—å Maxim T1.2-PRO. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ‚¨áÔ∏è", reply_markup=buttons)

@dp.callback_query(F.data == "switch_to_t1_1")
async def switch_to_t1_1(callback_query: types.CallbackQuery):
    global current_model
    current_model = MODEL_T1_1
    await callback_query.message.edit_text("–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Maxim T1.1. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ‚¨áÔ∏è")
    await callback_query.answer()

@dp.callback_query(F.data == "switch_to_t1_2")
async def switch_to_t1_2(callback_query: types.CallbackQuery):
    global current_model
    current_model = MODEL_T1_2
    await callback_query.message.edit_text("–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Maxim T1.2-PRO. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ‚¨áÔ∏è")
    await callback_query.answer()

@dp.callback_query(F.data == "switch_to_t2")
async def switch_to_t2(callback_query: types.CallbackQuery):
    global current_model
    current_model = MODEL_T2
    await callback_query.message.edit_text("–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Maxim T2. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ‚¨áÔ∏è")
    await callback_query.answer()

@dp.message(Command("clear"))
async def cmd_clear(message: types.Message):
    chat_context[message.chat.id] = []
    await message.answer("–Ø –≤—Å–µ –∑–∞–±—ã–ª! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤—Å–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å? ü§î")

@dp.message(F.text)
async def handle_message(message: types.Message):
    try:
        processing_message = await message.answer("ü™Å –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ.")
        context = chat_context.get(message.chat.id, [])
        context.append({"role": "user", "content": message.text})

        chat_response = client.chat.complete(
            model=current_model,
            messages=[
                {"role": "system", "content": PROMPTS[current_model]},
                *context
            ]
        )

        response_text = chat_response.choices[0].message.content
        context.append({"role": "assistant", "content": response_text})
        chat_context[message.chat.id] = context

        await bot.delete_message(message.chat.id, processing_message.message_id)
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    try:
        if current_model == MODEL_T1_2:
            processing_message = await message.answer("üñº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ.")

            file_id = message.photo[-1].file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path

            file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
            
            response_text = analyze_image_with_pixtral(file_url)

            await bot.delete_message(message.chat.id, processing_message.message_id)
            await message.answer(response_text)
        else:
            await message.answer("–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Maxim T1.2-PRO –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(5)
        asyncio.create_task(main())

if __name__ == "__main__":
    asyncio.run(main())
